{"version":3,"sources":["features/user/userSlice.js","Sidebarchat.js","firebase.js","Sidebar.js","Chatbox.js","features/user/userLogin.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","username","photourl","email","uid","chatWithPersonEmail","chatWithPersonPhotoUrl","reducers","setUsername","state","action","payload","userdetails","logout","userWithWhomToChat","actions","selectUser","user","selectPhotourl","selectEmail","selectUid","selectChatWithPersonEmail","selectChatWithPersonPhotoUrl","Sidebarchat","id","photoURL","uidConcatenation","dispatch","useDispatch","onClick","console","log","to","className","Avatar","src","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useState","rooms","setrooms","useSelector","useremail","userphotourl","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","type","placeholder","newRoom","prompt","add","personName","timestamp","FieldValue","serverTimestamp","style","fontSize","cursor","a_room","Chatbox","message","setmessage","roomName","setroomName","photoURLForHeader","setPhotoURLForHeader","messages_from_store","setmessages_from_store","userEmail","photoURl","useParams","history","useHistory","setState","list","get","then","querySnapshot","forEach","push","nothing","catch","error","log_out","e","preventDefault","signOut","nothning","div","document","querySelector","scrollTop","scrollHeight","clientHeight","display","alignItems","marginRight","height","a_message","border","outline","flex","value","onChange","target","event","merge","Login","disptach","setname","Button","disabled","variant","color","signInWithRedirect","result_we_get","displayName","alert","App","onAuthStateChanged","authUser","set","Date","path","exact","configureStore","reducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gYAKaA,EAAYC,YAAY,CAE/BC,KAAM,OAENC,aAAc,CAERC,SAAU,KACVC,SAAU,GACVC,MAAO,GACPC,IAAK,GACLC,oBAAqB,GACrBC,uBAAwB,IAQ9BC,SAAU,CACJC,YAAa,SAACC,EAAOC,GAMfD,EAAMR,SAAWS,EAAOC,QAAQC,YAChCH,EAAMP,SAAWQ,EAAOC,QAAQT,SAChCO,EAAMN,MAAQO,EAAOC,QAAQR,MAC7BM,EAAML,IAAMM,EAAOC,QAAQP,KAEjCS,OAAQ,SAACJ,GACHA,EAAMR,SAAW,KACjBQ,EAAMP,SAAW,KACjBO,EAAMN,MAAQ,KACdM,EAAML,IAAM,MAElBU,mBAAoB,SAACL,EAAOC,GACtBD,EAAMJ,oBAAsBK,EAAOC,QAAQN,oBAC3CI,EAAMH,uBAAyBI,EAAOC,QAAQL,2B,EAMLT,EAAUkB,QAAtDP,E,EAAAA,YAAaK,E,EAAAA,OAAQC,E,EAAAA,mBAevBE,EAAa,SAACP,GAAD,OAAWA,EAAMQ,KAAKhB,UACnCiB,EAAiB,SAACT,GAAD,OAAWA,EAAMQ,KAAKf,UACvCiB,EAAc,SAACV,GAAD,OAAWA,EAAMQ,KAAKd,OACpCiB,EAAY,SAACX,GAAD,OAAWA,EAAMQ,KAAKb,KAClCiB,EAA4B,SAACZ,GAAD,OAAWA,EAAMQ,KAAKZ,qBAClDiB,EAA+B,SAACb,GAAD,OAAWA,EAAMQ,KAAKX,wBAInDT,IAAf,Q,MC5Be0B,MAvCf,YAAuE,IAAhDC,EAA+C,EAA/CA,GAAIzB,EAA2C,EAA3CA,KAAM0B,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,iBAAkBvB,EAAS,EAATA,MAEjDwB,EAAWC,cAgBjB,OACM,qBAAKC,QAde,WACpBC,QAAQC,IAAI,cAAeN,GAC3BE,EACMb,EAAmB,CACbT,oBAAqBF,EACrBG,uBAAwBmB,MASpC,SACM,cAAC,IAAD,CAAMO,GAAE,iBAAYN,GAApB,SACM,sBAAKO,UAAU,aAAf,UACM,qBAAKA,UAAU,SAAf,SACM,cAACC,EAAA,EAAD,CACMD,UAAU,cACVE,IAAKV,GAAQ,iDAAwDD,EAAxD,YAGzB,sBAAKS,UAAU,+BAAf,UACM,mBAAGA,UAAU,OAAb,SAAqBlC,IACrB,4D,QCtB9BqC,EAFcC,IAASC,cAVN,CACnBC,OAAQ,0CACRC,WAAY,gCACZC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKIC,YAEjBC,EAAOV,IAASU,OAEhBC,EAAW,IAAIX,IAASU,KAAKE,mBAGpBb,I,MC+DAc,MAzEf,WAAoB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAKPpC,EAAOqC,YAAYtC,GACnBuC,EAAYD,YAAYnC,GACxBqC,EAAeF,YAAYpC,GAC3Bd,EAAMkD,YAAYlC,GA0BxB,OAxBAqC,qBAAU,WACJrB,EAAGsB,WAAW,SACPC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GAAD,OACNR,EACMQ,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CACtBxC,GAAIwC,EAAIxC,GACRyC,KAAMD,EAAIC,iBAIrC,IAYHnC,QAAQC,IAAI,SAAUqB,GAGhB,sBAAKnB,UAAU,UAAf,UACM,sBAAKA,UAAU,kBAAf,UACM,cAACC,EAAA,EAAD,CAAQC,IAAKqB,IACb,sBAAKvB,UAAU,wBAAf,UACM,6BAAKhB,IACL,8CACmB,uCAAUsC,cAKzC,sBAAKtB,UAAU,iBAAf,UACM,cAAC,IAAD,IACA,uBAAOA,UAAU,QAAQiC,KAAK,OAAOC,YAAY,gCAGvD,qBAAKtC,QA5BL,WACN,IAAIuC,EAAUC,OAAO,kBACjBD,GACEhC,EAAGsB,WAAW,SAASY,IAAI,CACrBC,WAAYH,EACZI,UAAWnC,IAASS,UAAU2B,WAAWC,qBAuB5BzC,UAAU,WAA7B,SACM,oBAAI0C,MAAO,CAAEC,SAAU,OAAQC,OAAQ,WAAa5C,UAAU,UAA9D,4BAEN,qBAAKA,UAAU,iBAAf,SACM,qBAAKA,UAAU,eAAf,SACOmB,EAAMW,KAAI,SAACe,GAAD,iBACL,sBAAK7C,UAAU,YAAf,UACM,cAAC,EAAD,CAAaT,GAAIsD,EAAOtD,GAAoBzB,KAAM+E,EAAOb,KAAKM,WAAY9C,SAAUqD,EAAOb,KAAKxC,SAC1FC,kBAAwB,OAANoD,QAAM,IAANA,GAAA,UAAAA,EAAQb,YAAR,eAAc7D,KAAMA,GAAY,OAAN0E,QAAM,IAANA,GAAA,UAAAA,EAAQb,YAAR,eAAc7D,KAAMA,EAAMA,GAAG,OAAG0E,QAAH,IAAGA,GAAH,UAAGA,EAAQb,YAAX,aAAG,EAAc7D,KAC1FD,MAAO2E,EAAOb,KAAKM,YAFQO,EAAOtD,IAIxC,oBAAGS,UAAU,yBAAb,cAAwC6C,EAAOb,KAAKM,cACpD,oBAAItC,UAAU,0B,gDC8DzC8C,MA3Hf,WAAoB,IAAD,EACiB5B,mBAAS,IAD1B,mBACN6B,EADM,KACGC,EADH,OAEmB9B,mBAAS,IAF5B,mBAEN+B,EAFM,KAEIC,EAFJ,OAGqChC,mBAAS,IAH9C,mBAGNiC,EAHM,KAGaC,EAHb,OAIyClC,mBAAS,IAJlD,mBAINmC,EAJM,KAIeC,EAJf,KAKPC,EAAYlC,YAAYnC,GAExBhB,GADMmD,YAAYlC,GACVkC,YAAYjC,IACpBoE,EAAWnC,YAAYhC,GACrBE,EAAOkE,cAAPlE,GACFmE,EAAUC,cACVjE,EAAWC,cACjB6B,qBAAU,WACJ4B,EAAqBI,GACrBN,EAAYhF,KACf,CAACqB,EAAIrB,IAfK,MAiBagD,oBAAS,GAjBtB,mBAiBN1C,EAjBM,KAiBCoF,EAjBD,KAkBbpC,qBAAU,WACJ,IAAMqC,EAAO,GACb1D,EAAGsB,WAAW,YAAYM,IAAIxC,GAAIkC,WAAW,YAAYC,QAAQ,YAAa,OAAOoC,MAAMC,MAAK,SAAAC,GAC1FA,EAAcC,SAAQ,SAAAlC,GAChB8B,EAAKK,KAAKnC,EAAIC,cAEvB+B,MAAK,SAAAI,GACFb,EAAuBO,MAC1BO,OAAM,SAAAC,GAAK,OAAIxE,QAAQC,IAAI,6BAA8BuE,QAE/D,CAAC9E,EAAIf,IAIR,IAgBM8F,EAAU,SAACC,GACXA,EAAEC,iBACF9E,EAASd,KACTwB,IAASU,OAAO2D,UAAUV,MAAK,SAAAW,GACzBhB,EAAQQ,KAAK,QAChBE,OAAM,SAAAC,GACHxE,QAAQC,IAAIuE,OAUxB,OANA7C,qBAAU,WACJ,IAAImD,EAAMC,SAASC,cAAc,cACjCF,EAAIG,WAAe,OAAHH,QAAG,IAAHA,OAAA,EAAAA,EAAKI,eAAL,OAAoBJ,QAApB,IAAoBA,OAApB,EAAoBA,EAAKK,gBAE5C,CAAC3B,IAGE,sBAAKrD,UAAU,UAAf,UAEYiD,EACM,sBAAKjD,UAAU,iBAAf,UACM,sBAAK0C,MAAO,CAAEuC,QAAS,OAAQC,WAAY,UAA3C,UACM,qBAAKlF,UAAU,wBAAf,SACM,cAACC,EAAA,EAAD,CAAQC,IAAKiD,MAGnB,sBAAKnD,UAAU,yBAAf,UACM,6BAAKiD,IACL,sDAIZ,sBAAKjD,UAAU,YAAY0C,MAAO,CAAEyC,YAAa,OAAQvC,OAAQ,WAAahD,QAAS0E,EAAvF,UACM,qBAAKtE,UAAU,GAAf,SACM,cAAC,IAAD,CAAeJ,QAAS0E,MAE9B,6CAGZ,qBAAK5B,MAAO,CAAE0C,OAAQ,SAKlC,qBAAK7F,GAAG,YAAYS,UAAU,iBAA9B,SACOqD,EAAoBvB,KAAI,SAACuD,GAAD,OACnB,qBAAK9F,GAAG,GAAGS,UAAU,eAArB,SACM,oBACMA,UAAS,iCAA4BuD,IAAc8B,EAAUvH,MAAxB,4BAD3C,UAIO,IACD,uBACA,mBAAGkC,UAAU,YAAb,SAA0BqF,EAAUvH,OACnCuH,EAAUtC,kBAMnC,qBAAK/C,UAAU,iBAAf,SACM,uBAAMA,UAAU,sBAAsB0C,MAAO,CAAEC,SAAU,QAAzD,UACM,0BAAUD,MAAO,CAAE4C,OAAQ,OAAQC,QAAS,OAAQC,KAAM,KACpDC,MAAO1C,EACP2C,SAAU,SAACnB,GAAD,OAAOvB,EAAWuB,EAAEoB,OAAOF,QACrCxD,KAAK,SACLC,YAAY,mBAElB,cAAC,IAAD,CAAkBS,SAAS,QAAQ/C,QApFvC,SAACgG,GACfA,EAAMpB,iBACU,KAAZzB,GACE5C,EAAGsB,WAAW,YAAYM,IAAIxC,GAAIkC,WAAW,YAAYY,IAAI,CACvDU,QAASA,EACTjF,KAAMyF,EACNhB,UAAWnC,IAASS,UAAU2B,WAAWC,mBAC5C,CAAEoD,OAAO,IACL9B,MAAK,SAAAI,GACAnB,EAAW,IACXY,GAAUpF,MAEf4F,OAAM,SAAAC,GAAK,OAAIxE,QAAQC,IAAIuE,OAwEmCrE,UAAU,cAAciC,KAAK,SAASS,MAAO,CAAEE,OAAQ,sB,uBChE/HkD,MA3Df,WACM,IAAMC,EAAWpG,cADN,EAEauB,mBAAS,CAAC,KAFvB,mBAEJpD,EAFI,KAEEkI,EAFF,KAqCX,OAFyB3E,YAAYtC,GAG/B,8BAGM,qBAAKiB,UAAU,UAAf,SAEM,cAACiG,EAAA,EAAD,CACMjG,UAAU,8DACVkG,UAAWpI,EACXqI,QAAQ,YACRC,MAAM,UACNnE,KAAK,SACLrC,QA7CN,SAAC2E,GACbA,EAAEC,iBAEF1D,EAAKuF,mBAAmBtF,GACjBgD,MAAK,SAACuC,GACDP,EACMxH,EAAY,CACNI,YAAa2H,EAActH,KAAKuH,YAChCtI,SAAUqI,EAActH,KAAKQ,SAC7BtB,MAAOoI,EAActH,KAAKd,YAI3CkG,OAAM,SAACC,GAAD,OAAWmC,MAAMnC,MAG9B2B,EAAQ,KAuBI,0BCwBTS,MAjEf,WACM,IAAMzH,EAAOqC,YAAYtC,GACnBW,EAAWC,cA4BjB,OA1BA6B,qBAAU,WACJV,EAAK4F,oBAAmB,SAACC,GACfA,GACExG,EAAGsB,WAAW,SAASM,IAAI4E,EAASzI,OAAO0I,IAAI,CACzCtE,WAAYqE,EAASzI,MACrBqE,UAAW,IAAIsE,KACfrH,SAAUmH,EAASnH,SACnBrB,IAAKwI,EAASxI,KACjB,CAAE0H,OAAO,IAAQ9B,OAAOK,OAAM,SAAAC,GAC3BxE,QAAQC,IAAI,0BAA2BuE,MAG7C3E,EACMnB,EAAY,CACNI,YAAagI,EAASJ,YACtBtI,SAAU0I,EAASnH,SACnBtB,MAAOyI,EAASzI,MAChBC,IAAKwI,EAASxI,QAI1BuB,EAASd,UAGxB,IAGG,qBAAKoB,UAAU,MAAf,SACQhB,EAGI,qBAAKgB,UAAU,WAAf,SACM,cAAC,IAAD,UACM,eAAC,IAAD,WAKM,eAAC,IAAD,CAAO8G,KAAK,aAAZ,UACM,cAAC,EAAD,IACA,cAAC,EAAD,OAKN,eAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,WAAlB,UACM,cAAC,EAAD,IACA,cAAC,EAAD,OAEN,eAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,UACM,cAAC,EAAD,IACA,cAAC,EAAD,cAtBxB,cAAC,EAAD,OCrCTE,cAAe,CAO5BC,QAAS,CAEPjI,KAAMkI,KCHUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ/C,SAASgD,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,MAAK,SAAAiE,GACjCA,EAAaC,kB","file":"static/js/main.35d173d5.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// here counter is a layer\r\n// such layer are called Slice of the Store\r\n// such slices are created using createSlice\r\nexport const userSlice = createSlice({\r\n      // and the slice has a name called counter\r\n      name: \"user\",\r\n      // who has a initial state\r\n      initialState: {\r\n            // and initial value\r\n            username: null,\r\n            photourl: \"\",\r\n            email: \"\",\r\n            uid: \"\",\r\n            chatWithPersonEmail: \"\",\r\n            chatWithPersonPhotoUrl: \"\"\r\n      },\r\n      // and here we describe the reducer\r\n      // Reducers are functions that take the current state\r\n      //  and an action as arguments, and return a new state\r\n      // result. In other words, (state, action) => newState.\r\n      // here, increment, decrement and incerementByAmount\r\n      // are reducer functions\r\n      reducers: {\r\n            setUsername: (state, action) => {\r\n                  // The below are defualt comments you get at creation:\r\n                  // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n                  // doesn't actually mutate the state because it uses the Immer library,\r\n                  // which detects changes to a \"draft state\" and produces a brand new\r\n                  // immutable state based off those changes\r\n                  state.username = action.payload.userdetails;\r\n                  state.photourl = action.payload.photourl;\r\n                  state.email = action.payload.email;\r\n                  state.uid = action.payload.uid\r\n            },\r\n            logout: (state) => {\r\n                  state.username = null;\r\n                  state.photourl = null;\r\n                  state.email = null;\r\n                  state.uid = null\r\n            },\r\n            userWithWhomToChat: (state, action) => {\r\n                  state.chatWithPersonEmail = action.payload.chatWithPersonEmail\r\n                  state.chatWithPersonPhotoUrl = action.payload.chatWithPersonPhotoUrl\r\n            }\r\n      },\r\n});\r\n\r\n// and we basically export this to counterSlice.actions\r\nexport const { setUsername, logout, userWithWhomToChat } = userSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n// export const incrementAsync = amount => dispatch => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectUser = (state) => state.user.username;\r\nexport const selectPhotourl = (state) => state.user.photourl;\r\nexport const selectEmail = (state) => state.user.email;\r\nexport const selectUid = (state) => state.user.uid;\r\nexport const selectChatWithPersonEmail = (state) => state.user.chatWithPersonEmail;\r\nexport const selectChatWithPersonPhotoUrl = (state) => state.user.chatWithPersonPhotoUrl;\r\n\r\n\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { userWithWhomToChat } from \"./features/user/userSlice\"\r\n\r\nimport \"./Sidebarchat.css\";\r\nfunction Sidebarchat({ id, name, photoURL, uidConcatenation, email }) {\r\n\r\n      const dispatch = useDispatch()\r\n\r\n\r\n      const sendEmailDispacth = () => {\r\n            console.log(\"photo,dis, \", photoURL);\r\n            dispatch(\r\n                  userWithWhomToChat({\r\n                        chatWithPersonEmail: email,\r\n                        chatWithPersonPhotoUrl: photoURL\r\n                  })\r\n            )\r\n      }\r\n\r\n\r\n\r\n\r\n      return (\r\n            <div onClick={sendEmailDispacth}>\r\n                  <Link to={`/rooms/${uidConcatenation}`}>\r\n                        <div className=\"start_chat\">\r\n                              <div className=\"Avatar\">\r\n                                    <Avatar\r\n                                          className=\"avatarHover\"\r\n                                          src={photoURL ? photoURL : `https://avatars.dicebear.com/api/human/${id}.svg`}\r\n                                    />\r\n                              </div>\r\n                              <div className=\"start_chat_name_last_message\">\r\n                                    <p className=\"Name\">{name}</p>\r\n                                    <p>Last Message....</p>\r\n                              </div>\r\n                        </div>\r\n                  </Link>\r\n            </div>\r\n\r\n      );\r\n}\r\n\r\nexport default Sidebarchat;\r\n","import firebase from 'firebase'\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDNzyBhtO2hKRKNHJQxX6JK33eexKfsMsE\",\r\n    authDomain: \"chatbox-b45e3.firebaseapp.com\",\r\n    projectId: \"chatbox-b45e3\",\r\n    storageBucket: \"chatbox-b45e3.appspot.com\",\r\n    messagingSenderId: \"609218165702\",\r\n    appId: \"1:609218165702:web:4d13cefd0590ec6acf90c7\",\r\n    measurementId: \"G-R3HVEQ7CLG\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nconst db = firebaseApp.firestore()\r\n\r\nconst auth = firebase.auth()\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\n\r\nexport {auth, provider}\r\nexport default db\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Sidebarchat from \"./Sidebarchat\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectEmail, selectPhotourl, selectUid, selectUser } from \"./features/user/userSlice\";\r\n\r\n\r\nimport \"./Sidebar.css\";\r\n\r\nfunction Sidebar() {\r\n      const [rooms, setrooms] = useState([]);\r\n\r\n      // var db_store = db.collection('rooms')\r\n\r\n      const user = useSelector(selectUser);\r\n      const useremail = useSelector(selectEmail);\r\n      const userphotourl = useSelector(selectPhotourl);\r\n      const uid = useSelector(selectUid)\r\n\r\n      useEffect(() => {\r\n            db.collection(\"rooms\")\r\n                  .orderBy(\"timestamp\", \"desc\")\r\n                  .onSnapshot((snapshot) =>\r\n                        setrooms(\r\n                              snapshot.docs.map((doc) => ({\r\n                                    id: doc.id,\r\n                                    data: doc.data(),\r\n                              }))\r\n                        )\r\n                  );\r\n      }, []);\r\n\r\n\r\n      const Add = () => {\r\n            var newRoom = prompt(\"New room name?\");\r\n            if (newRoom) {\r\n                  db.collection(\"rooms\").add({\r\n                        personName: newRoom,\r\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                  });\r\n            }\r\n      };\r\n      console.log(\"rooms,\", rooms);\r\n      return (\r\n\r\n            <div className=\"sidebar\">\r\n                  <div className=\"sidebar_header \">\r\n                        <Avatar src={userphotourl} />\r\n                        <div className=\"sidebar_header_middle\">\r\n                              <h3>{user}</h3>\r\n                              <p>\r\n                                    Signed in as <strong> {useremail}</strong>\r\n                              </p>\r\n                        </div>\r\n                  </div>\r\n\r\n                  <div className=\"sidebar_search\">\r\n                        <SearchIcon />\r\n                        <input className=\"input\" type=\"text\" placeholder=\"Search or start new chat\" />\r\n                  </div>\r\n\r\n                  <div onClick={Add} className=\"new_chat\">\r\n                        <h3 style={{ fontSize: \"14px\", cursor: \"pointer\" }} className=\"addChat\" >Add New Chat</h3>\r\n                  </div>\r\n                  <div className=\"sidebar_scroll\">\r\n                        <div className=\"sidebar_chat\">\r\n                              {rooms.map((a_room) => (\r\n                                    <div className=\"classRoom\" >\r\n                                          <Sidebarchat id={a_room.id} key={a_room.id} name={a_room.data.personName} photoURL={a_room.data.photoURL}\r\n                                                uidConcatenation={a_room?.data?.uid < uid ? a_room?.data?.uid + uid : uid + a_room?.data?.uid}\r\n                                                email={a_room.data.personName}\r\n                                          />\r\n                                          <p className=\"personNameInSmallGroup\"> {a_room.data.personName}</p>\r\n                                          <hr className=\"hrGroup\" />\r\n                                    </div>\r\n                              ))}\r\n                        </div>\r\n                  </div>\r\n            </div>\r\n      );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport db from \"./firebase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport firebase from \"firebase\";\r\nimport { logout, selectChatWithPersonEmail, selectChatWithPersonPhotoUrl, selectEmail, selectUid, selectUser, userWithWhomToChat } from \"./features/user/userSlice\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport SendOutlinedIcon from '@material-ui/icons/SendOutlined';\r\n\r\nimport \"./Chatbox.css\";\r\n\r\nfunction Chatbox() {\r\n      const [message, setmessage] = useState(\"\");\r\n      const [roomName, setroomName] = useState([]);\r\n      const [photoURLForHeader, setPhotoURLForHeader] = useState(\"\")\r\n      const [messages_from_store, setmessages_from_store] = useState([]);\r\n      const userEmail = useSelector(selectEmail);\r\n      const uid = useSelector(selectUid)\r\n      const email = useSelector(selectChatWithPersonEmail)\r\n      const photoURl = useSelector(selectChatWithPersonPhotoUrl)\r\n      const { id } = useParams();\r\n      const history = useHistory()\r\n      const dispatch = useDispatch()\r\n      useEffect(() => {\r\n            setPhotoURLForHeader(photoURl)\r\n            setroomName(email)\r\n      }, [id, email]);\r\n\r\n      const [state, setState] = useState(false)\r\n      useEffect(() => {\r\n            const list = []\r\n            db.collection(\"messages\").doc(id).collection(\"messages\").orderBy(\"timestamp\", \"asc\").get().then(querySnapshot => {\r\n                  querySnapshot.forEach(doc => {\r\n                        list.push(doc.data())\r\n                  })\r\n            }).then(nothing => {\r\n                  setmessages_from_store(list)\r\n            }).catch(error => console.log(\"error in fetchig message, \", error))\r\n\r\n      }, [id, state]);\r\n\r\n      // console.log(\"msgs\", messages_from_store);\r\n\r\n      const sendMessage = (event) => {\r\n            event.preventDefault();\r\n            if (message !== \"\") {\r\n                  db.collection(\"messages\").doc(id).collection(\"messages\").add({\r\n                        message: message,\r\n                        name: userEmail,\r\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                  }, { merge: true })\r\n                        .then(nothing => {\r\n                              setmessage(\"\");\r\n                              setState(!state)\r\n                        })\r\n                        .catch(error => console.log(error))\r\n            }\r\n      };\r\n\r\n      const log_out = (e) => {\r\n            e.preventDefault();\r\n            dispatch(logout());\r\n            firebase.auth().signOut().then(nothning => {\r\n                  history.push(\"/\")\r\n            }).catch(error => {\r\n                  console.log(error);\r\n            })\r\n      };\r\n\r\n      useEffect(() => {\r\n            var div = document.querySelector(\"#scrollDiv\")\r\n            div.scrollTop = div?.scrollHeight - div?.clientHeight\r\n\r\n      }, [messages_from_store])\r\n\r\n      return (\r\n            <div className=\"chatbox\">\r\n                  {\r\n                        roomName ?\r\n                              <div className=\"chatbox_header\">\r\n                                    <div style={{ display: \"flex\", alignItems: 'center' }}>\r\n                                          <div className=\"chatbox_header_avatar\">\r\n                                                <Avatar src={photoURLForHeader} />\r\n\r\n                                          </div>\r\n                                          <div className=\"chatbox_header_details\">\r\n                                                <h3>{roomName}</h3>\r\n                                                <p>Last Seen At...</p>\r\n                                          </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"exit_icon\" style={{ marginRight: \"30px\", cursor: \"pointer\" }} onClick={log_out}>\r\n                                          <div className=\"\">\r\n                                                <ExitToAppIcon onClick={log_out} />\r\n                                          </div>\r\n                                          <p>LogOut</p>\r\n                                    </div>\r\n                              </div> :\r\n                              <div style={{ height: \"10%\" }}>\r\n                              </div>\r\n                  }\r\n\r\n\r\n                  <div id=\"scrollDiv\" className=\"message_scroll\">\r\n                        {messages_from_store.map((a_message) => (\r\n                              <div id=\"\" className=\"chatbox_body\">\r\n                                    <p\r\n                                          className={`chatbox_message_sender ${userEmail === a_message.name && `chatbox_message_receiver`\r\n                                                }`}\r\n                                    >\r\n                                          {\" \"}\r\n                                          <br />\r\n                                          <p className=\"span_name\">{a_message.name}</p>\r\n                                          {a_message.message}\r\n                                    </p>\r\n                              </div>\r\n                        ))}\r\n                  </div>\r\n\r\n                  <div className=\"chatbox_footer\">\r\n                        <form className=\"chatbox_footer_form\" style={{ fontSize: \"22px\" }}  >\r\n                              <textarea style={{ border: \"none\", outline: \"none\", flex: \"1\" }}\r\n                                    value={message}\r\n                                    onChange={(e) => setmessage(e.target.value)}\r\n                                    type=\"submit\"\r\n                                    placeholder=\"Type a message\"\r\n                              />\r\n                              <SendOutlinedIcon fontSize=\"large\" onClick={sendMessage} className=\"form_button\" type=\"submit\" style={{ cursor: \"pointer\" }} />\r\n                        </form>\r\n                  </div>\r\n            </div>\r\n      );\r\n}\r\n\r\nexport default Chatbox;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setUsername, logout, selectUser } from \"./userSlice\";\r\nimport \"tachyons\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport \"./userLogin.css\";\r\nimport db, { auth, provider } from \"../../firebase\";\r\n\r\nfunction Login() {\r\n      const disptach = useDispatch();\r\n      const [name, setname] = useState([\"\"]);\r\n\r\n      const LogInFunc = (e) => {\r\n            e.preventDefault();\r\n\r\n            auth.signInWithRedirect(provider)\r\n                  .then((result_we_get) => {\r\n                        disptach(\r\n                              setUsername({\r\n                                    userdetails: result_we_get.user.displayName,\r\n                                    photourl: result_we_get.user.photoURL,\r\n                                    email: result_we_get.user.email,\r\n                              })\r\n                        );\r\n                  })\r\n                  .catch((error) => alert(error));\r\n            //    console.log(result_we_get.user.username)\r\n            //{disptach(setUsername({userdetails : result_we_get.user.displayName}))}\r\n            setname(\"\");\r\n      };\r\n\r\n      const LogOutFunc = () => {\r\n            disptach(\r\n                  logout({\r\n                        userdetails: null,\r\n                        photourl: null,\r\n                        email: null,\r\n                  })\r\n            );\r\n      };\r\n\r\n      // through this now we can also use the value\r\n      // like printing, comparing it\r\n      const user_by_selector = useSelector(selectUser);\r\n\r\n      return (\r\n            <div>\r\n                  {/* <h2>React and Redux-Login Page</h2> */}\r\n                  {/* {user_by_selector ? <p> {user_by_selector} is logged in</p>: <p>No one logged in</p> } */}\r\n                  <div className=\"buttons\">\r\n                        {/* <input className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"  value={name} onChange={(e) => setname(e.target.value)} placeholder=\"Your Name\" type=\"text\"  /> */}\r\n                        <Button\r\n                              className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-black\"\r\n                              disabled={!name}\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              type=\"submit\"\r\n                              onClick={LogInFunc}\r\n                        >\r\n                              LogMeIn\r\n                        </Button>\r\n                        {/* <Button className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-black\"   variant=\"contained\" color=\"secondary\" onClick={(e) => LogOutFunc()}>LogMeOut</Button> */}\r\n                  </div>\r\n            </div>\r\n      );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Chatbox from \"./Chatbox\";\r\nimport { BrowserRouter as Router, Switch, Route, Link, HashRouter } from \"react-router-dom\";\r\nimport { logout, selectUser, setUsername } from \"./features/user/userSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Login from \"./features/user/userLogin\";\r\nimport db, { auth } from \"./firebase\";\r\n\r\nfunction App() {\r\n      const user = useSelector(selectUser);\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n            auth.onAuthStateChanged((authUser) => {\r\n                  if (authUser) {\r\n                        db.collection(\"rooms\").doc(authUser.email).set({\r\n                              personName: authUser.email,\r\n                              timestamp: new Date(),\r\n                              photoURL: authUser.photoURL,\r\n                              uid: authUser.uid\r\n                        }, { merge: true }).then().catch(error => {\r\n                              console.log(\"Error in setting user, \", error);\r\n                        })\r\n\r\n                        dispatch(\r\n                              setUsername({\r\n                                    userdetails: authUser.displayName,\r\n                                    photourl: authUser.photoURL,\r\n                                    email: authUser.email,\r\n                                    uid: authUser.uid,\r\n                              })\r\n                        );\r\n                  } else {\r\n                        dispatch(logout());\r\n                  }\r\n            });\r\n      }, []);\r\n\r\n      return (\r\n            <div className=\"App\">\r\n                  {!user ? (\r\n                        <Login />\r\n                  ) : (\r\n                        <div className=\"app_body\">\r\n                              <Router>\r\n                                    <HashRouter>\r\n                                          {/* <Route path='/home'>\r\n                            <h1>Welcome to home page</h1>\r\n                        </Route> */}\r\n\r\n                                          <Route path=\"/rooms/:id\">\r\n                                                <Sidebar />\r\n                                                <Chatbox />\r\n                                                {/* the Router below is ver necessary to keep\r\n                        because this is what makes the router keep working\r\n                         when we dont have full address with id */}\r\n                                          </Route>\r\n                                          <Route exact path=\"/chatbox\">\r\n                                                <Sidebar />\r\n                                                <Chatbox />\r\n                                          </Route>\r\n                                          <Route exact path=\"/\">\r\n                                                <Sidebar />\r\n                                                <Chatbox />\r\n                                          </Route>\r\n                                    </HashRouter>\r\n                              </Router>\r\n                        </div>\r\n                  )}\r\n            </div>\r\n      );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n// import counterReducer from '../features/counter/counterSlice';\r\nimport userReducer from '../features/user/userSlice';\r\n\r\n\r\n// here configureStore is configuring store for us\r\nexport default configureStore({\r\n  // and we are passing it a reducer\r\n  // and which as a layer called counter that has a reducer counterReducer\r\n  // you can have many layer\r\n  // and each layer and has a reducer\r\n  // such layer are called Slice of the Store\r\n  // you can have many layer here and all of them are independent to each other\r\n  reducer: {\r\n    // counter: counterReducer,\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}