{"version":3,"sources":["Sidebarchat.js","firebase.js","features/user/userSlice.js","Sidebar.js","Chatbox.js","features/user/userLogin.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Sidebarchat","id","name","console","log","to","className","Avatar","src","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","userSlice","createSlice","initialState","username","photourl","email","reducers","setUsername","state","action","payload","userdetails","logout","actions","selectUser","user","selectPhotourl","selectEmail","Sidebar","useState","rooms","setrooms","useSelector","useremail","userphotourl","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","type","placeholder","onClick","newRoom","prompt","add","personName","timestamp","FieldValue","serverTimestamp","a_room","Chatbox","message","setmessage","roomName","setroomName","messages_from_store","setmessages_from_store","useParams","dispatch","useDispatch","e","a_message","Date","toDate","toUTCString","value","onChange","target","Button","preventDefault","Login","disptach","setname","disabled","variant","color","signInWithPopup","then","result_we_get","displayName","photoURL","catch","error","alert","App","path","configureStore","reducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.742b8003.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport './Sidebarchat.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nfunction Sidebarchat({ id, name}) {\r\n\r\n    // this was initially used to generate random number\r\n    // const [seed_for_avatar, setseed_for_avatar] = useState('')\r\n\r\n    // useEffect(() => {\r\n    //    setseed_for_avatar(Math.random())\r\n    // }, [])\r\n\r\n\r\n    console.log(id, name)\r\n    return (\r\n        \r\n        <Link to ={`/rooms/${id}`}>\r\n            <div className='sidebar_chat'>\r\n            \r\n                <div className='start_chat'>\r\n                    <div className='Avatar'>\r\n                    <Avatar  src={`https://avatars.dicebear.com/api/human/${id}.svg`} />\r\n                    </div>\r\n                    <div className='start_chat_name_last_message'>\r\n                    \r\n                            <p className='Name'>{name}</p>\r\n                            <p>Last Message....</p>\r\n                      \r\n\r\n                    </div>\r\n                \r\n                </div>\r\n\r\n\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Sidebarchat\r\n","import firebase from 'firebase'\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDNzyBhtO2hKRKNHJQxX6JK33eexKfsMsE\",\r\n    authDomain: \"chatbox-b45e3.firebaseapp.com\",\r\n    projectId: \"chatbox-b45e3\",\r\n    storageBucket: \"chatbox-b45e3.appspot.com\",\r\n    messagingSenderId: \"609218165702\",\r\n    appId: \"1:609218165702:web:4d13cefd0590ec6acf90c7\",\r\n    measurementId: \"G-R3HVEQ7CLG\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nconst db = firebaseApp.firestore()\r\n\r\nconst auth = firebase.auth()\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\n\r\nexport {auth, provider}\r\nexport default db\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n// here counter is a layer\r\n// such layer are called Slice of the Store\r\n// such slices are created using createSlice\r\nexport const userSlice = createSlice({\r\n  // and the slice has a name called counter\r\n  name: 'user',\r\n  // who has a initial state\r\n  initialState: {\r\n    // and initial value\r\n    username: null,\r\n    photourl: '',\r\n    email: '',\r\n\r\n  },\r\n  // and here we describe the reducer\r\n  // Reducers are functions that take the current state\r\n  //  and an action as arguments, and return a new state \r\n  // result. In other words, (state, action) => newState.\r\n  // here, increment, decrement and incerementByAmount\r\n  // are reducer functions\r\n  reducers: {\r\n    setUsername: (state,action) => {\r\n                // The below are defualt comments you get at creation:\r\n                // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n                // doesn't actually mutate the state because it uses the Immer library,\r\n                // which detects changes to a \"draft state\" and produces a brand new\r\n                // immutable state based off those changes\r\n      state.username = action.payload.userdetails;\r\n      state.photourl = action.payload.photourl;\r\n      state.email = action.payload.email;\r\n    },\r\n    logout: state => {\r\n      state.username = null;\r\n    },\r\n  },\r\n});\r\n\r\n\r\n// and we basically export this to counterSlice.actions\r\nexport const { setUsername, logout } = userSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n// export const incrementAsync = amount => dispatch => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectUser = state => state.user.username;\r\nexport const selectPhotourl = state => state.user.photourl;\r\nexport const selectEmail = state => state.user.email;\r\n\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Sidebar.css'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Sidebarchat from './Sidebarchat'\r\nimport db from './firebase'\r\nimport firebase from 'firebase'\r\nimport { useSelector } from 'react-redux';\r\nimport {  selectEmail, selectPhotourl, selectUser } from './features/user/userSlice';\r\n\r\nfunction Sidebar() {\r\n\r\n    const [rooms, setrooms] = useState([])\r\n\r\n    // var db_store = db.collection('rooms')\r\n\r\n    const user = useSelector(selectUser)\r\n    const useremail = useSelector(selectEmail)\r\n    const userphotourl = useSelector(selectPhotourl)\r\n    \r\n\r\n    useEffect(() => {\r\n        db.collection('rooms').orderBy('timestamp', 'desc').onSnapshot(snapshot => setrooms(snapshot.docs.map(doc =>({\r\n            id: doc.id,\r\n            data: doc.data()\r\n        }))))\r\n        console.log(rooms)\r\n    }, [''])\r\n\r\n\r\n\r\n   \r\n    console.log(rooms)\r\n        \r\n        const Add =() => {\r\n            var newRoom = prompt('New room name?') \r\n            if (newRoom) {\r\n                db.collection('rooms').add({personName: newRoom, timestamp : firebase.firestore.FieldValue.serverTimestamp()})\r\n            }\r\n        \r\n    }\r\n\r\n    console.log('sidbar page', user, useremail, userphotourl)\r\n    console.log('rooms',rooms)\r\n    console.log('for avatar icon', user.photourl)\r\n\r\n    \r\n    return (\r\n        <div className='sidebar'>\r\n            \r\n            <div className=\"sidebar_header \">\r\n                < Avatar src={userphotourl} />\r\n                <div className=\"sidebar_header_middle\">\r\n                    <h3>{user}</h3>\r\n                    <p>Singnd in as <span> {useremail}</span></p>\r\n                </div>\r\n                \r\n                <div className='sidebar_header_right'>\r\n                   \r\n                </div>\r\n            </div>\r\n\r\n            <div className='sidebar_search_outside'>\r\n                <div className='sidebar_search'>\r\n                    <SearchIcon/>\r\n                    <input type='text' placeholder='Search or start new chat'/>\r\n                </div>\r\n\r\n            </div>\r\n            <div onClick={Add} className='new_chat'>\r\n                <h3 >Add  New Chat</h3>\r\n            </div>\r\n            <div className='sidebar_chat'>\r\n                \r\n                {rooms.map(a_room => (\r\n                     <Sidebarchat id={a_room.id} key={a_room.id} name={a_room.data.personName}   />\r\n                ))}\r\n\r\n\r\n\r\n\r\n               \r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React, { useEffect, useState } from 'react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport './Chatbox.css'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { Button } from '@material-ui/core';\r\nimport { useParams } from 'react-router-dom';\r\nimport db from './firebase'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport firebase from 'firebase'\r\nimport { logout, selectUser } from './features/user/userSlice';\r\n\r\nfunction Chatbox() {\r\n\r\n    const [message, setmessage] = useState('')\r\n    const [roomName, setroomName] = useState([])\r\n    const [messages_from_store, setmessages_from_store] = useState([])\r\n    // in back days getting a link of other compoet was a headchae ,\r\n    // but with this we can easliy get a link; the link this is graps\r\n    // is same as the roomId we declared it in App.js at route path of \r\n    // line 28 inside which <sidebar>  and <chatbox>  is defined\r\n\r\n    // here this roomId is same as id in firebase......\r\n    // in App.js it gets roomId from as a Link which in sidebarchat.js\r\n    //  is given as id value\r\n    // you can also print it as a console value and check it\r\n\r\n    const user = useSelector(selectUser)\r\n\r\n\r\n    const {id} = useParams()\r\n\r\n    console.log('useparam',id)\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            db.collection('rooms').doc(id).onSnapshot(snapshot =>(\r\n                setroomName(snapshot.data().personName)\r\n            ))\r\n        }\r\n       \r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        // if (id) {\r\n            db.collection('rooms').doc(id).collection('messages').orderBy('timestamp', 'asc').onSnapshot(\r\n                snapshot => setmessages_from_store((snapshot.docs.map(doc => doc.data()))))\r\n        // }\r\n       \r\n    }, [id]) //the id param here is very\r\n    //important. it must be bear in mind\r\n    // that with the change in id only we want\r\n    //to know that we have chanfed to a different\r\n    // person and now we want to know messaged of\r\n    //different id that is different person \r\n\r\n\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n\r\n        db.collection('rooms').doc(id).collection('messages').add({\r\n           \r\n            message: message, \r\n            name: user,\r\n            timestamp:firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n       setmessage('')\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const log_out = (e) => {\r\n      \r\n        console.log('cliecked_logout')\r\n        dispatch(logout());\r\n        console.log('cliecked_logout_after_dispatch')\r\n    }\r\n\r\n\r\n\r\n\r\n    console.log(roomName)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div  className=\"chatbox\">\r\n            <div className=\"chatbox_header\">\r\n                <div  className='chatbox_header_avatar'>\r\n                    <Avatar />\r\n                </div>\r\n               \r\n                <div className='chatbox_header_details'>\r\n                    <h3>{roomName}</h3>\r\n                    <p>Last Seen At...</p>                  \r\n                </div>\r\n                <div className='exit_icon' onClick={log_out}>\r\n                    <div className='exit_icon_icon'>\r\n                        <ExitToAppIcon  />\r\n                    </div>\r\n                    <p>LogOut</p>\r\n                </div>\r\n            </div>\r\n        \r\n\r\n\r\n         <div id='' className='message_scroll'>\r\n                {messages_from_store.map(a_message => \r\n                (\r\n                    <div id='' className='chatbox_body'>\r\n                        <p className={`chatbox_message_sender ${ user === a_message.name  && `chatbox_message_receiver`}`}>\r\n                            <span className='span_name'>{a_message.name}</span>{a_message.message}<span className='span_time'>{new Date(messages_from_store.timestamp?.toDate()).toUTCString()}</span>\r\n                        </p>\r\n                    </div>\r\n                ))}\r\n\r\n\r\n        </div>\r\n           \r\n          \r\n\r\n            <div className='chatbox_footer'>\r\n                <form className='chatbox_footer_form'>\r\n                    <SearchIcon />\r\n                    <input value={message} onChange={e => setmessage(e.target.value)} type='text' placeholder='Type a message'  />\r\n                    <Button onClick={sendMessage} type='submit'/>\r\n                </form>\r\n                \r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chatbox\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport{setUsername, logout, selectUser} from './userSlice'\r\nimport 'tachyons'\r\nimport {Button } from '@material-ui/core';\r\nimport './userLogin.css'\r\nimport db, { auth, provider } from '../../firebase';\r\n\r\n\r\nfunction Login() {\r\n\r\n    const disptach = useDispatch();\r\n    const [name, setname] = useState([''])\r\n\r\n\r\n\r\n\r\n    const LogInFunc = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.signInWithPopup(provider)\r\n        .then(result_we_get =>{disptach(setUsername({\r\n            userdetails : result_we_get.user.displayName,\r\n            photourl: result_we_get.user.photoURL,\r\n            email: result_we_get.user.email,\r\n        }))})\r\n        .catch(error => alert(error))\r\n    //    console.log(result_we_get.user.username)\r\n    //{disptach(setUsername({userdetails : result_we_get.user.displayName}))}\r\n        setname('')\r\n    }\r\n  \r\n    const LogOutFunc  = () => {\r\n        disptach(logout());\r\n    }\r\n\r\n    // through this now we can also use the value\r\n    // like printing, comparing it\r\n    const user_by_selector = useSelector(selectUser)\r\n\r\n   \r\n\r\n    return (\r\n        <div>\r\n\r\n            {/* <h2>React and Redux-Login Page</h2> */}\r\n            {/* {user_by_selector ? <p> {user_by_selector} is logged in</p>: <p>No one logged in</p> } */}\r\n            <div className='buttons'>\r\n                {/* <input className=\"input-reset ba b--black-20 pa2 mb2 db w-100\"  value={name} onChange={(e) => setname(e.target.value)} placeholder=\"Your Name\" type=\"text\"  /> */}\r\n                <Button className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-black\" disabled={!name}  variant=\"contained\" color=\"primary\" type=\"submit\" onClick={LogInFunc}>LogMeIn</Button>\r\n                {/* <Button className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-black\"   variant=\"contained\" color=\"secondary\" onClick={(e) => LogOutFunc()}>LogMeOut</Button> */}\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\r\n// import logo from './logo.svg';\r\n// import { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\nimport Sidebar from './Sidebar'\r\nimport Chatbox from './Chatbox'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport { selectUser } from './features/user/userSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport Login from './features/user/userLogin';\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    const user = useSelector(selectUser)\r\n\r\n\r\n    console.log('app_page',user)\r\n\r\n  return (\r\n    <div className='app'>\r\n\r\n      {!user ?  <Login /> :\r\n                <div className='app_body'>\r\n                    <Router>\r\n                      <Switch>\r\n                    \r\n                        {/* <Route path='/home'>\r\n                            <h1>Welcome to home page</h1>\r\n                        </Route> */}\r\n\r\n                        <Route path='/rooms/:id'>\r\n                            \r\n                              <Sidebar />\r\n                              <Chatbox />\r\n                        {/* the Router below is ver necessary to keep\r\n                        because this is what makes the router keep working\r\n                         when we dont have full address with id */}\r\n                        </Route>\r\n                            <Sidebar />\r\n                            <Chatbox />\r\n                        <Route>\r\n\r\n                        </Route>\r\n                      </Switch>\r\n                    </Router>\r\n                  </div>\r\n\r\n      }\r\n\r\n       \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n// import counterReducer from '../features/counter/counterSlice';\r\nimport userReducer from '../features/user/userSlice';\r\n\r\n\r\n// here configureStore is configuring store for us\r\nexport default configureStore({\r\n  // and we are passing it a reducer\r\n  // and which as a layer called counter that has a reducer counterReducer\r\n  // you can have many layer\r\n  // and each layer and has a reducer\r\n  // such layer are called Slice of the Store\r\n  // you can have many layer here and all of them are independent to each other\r\n  reducer: {\r\n    // counter: counterReducer,\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}